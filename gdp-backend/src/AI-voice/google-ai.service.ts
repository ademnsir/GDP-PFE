import { Injectable } from '@nestjs/common';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { ChatSessionService } from './chat-session/chat-session.service';
import { ProjectContextService } from './project-context.service';

@Injectable()
export class GoogleAiService {
  private genAI: GoogleGenerativeAI;
  private model;

  constructor(
    private readonly chatSessionService: ChatSessionService,
    private readonly projectContextService: ProjectContextService
  ) {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY is not set.');
    }
    this.genAI = new GoogleGenerativeAI(apiKey);
    this.model = this.genAI.getGenerativeModel({
      model: "gemini-2.0-flash",
    });
  }

  async sendMessage(message: string, userRole?: string): Promise<string> {
    const generationConfig = {
      temperature: 0.7,
      topP: 0.9,
      topK: 40,
      maxOutputTokens: 2048,
      responseMimeType: 'text/plain',
    };

    try {
      // D√©tecter le contexte du message
      const context = this.projectContextService.detectContext(message);
      console.log('üîç Contexte d√©tect√©:', context);
      
      // G√©n√©rer le prompt contextuel sp√©cialis√©
      const contextualPrompt = this.projectContextService.generateContextualPrompt(message, userRole);
      console.log('üìù Prompt contextuel g√©n√©r√© pour le contexte:', context);
      
      // R√©cup√©rer l'historique de conversation
      let history = await this.chatSessionService.getSessionMessages();
      
      // Construire le message complet avec contexte
      const fullPrompt = `${contextualPrompt}

HISTORIQUE DE CONVERSATION:
${history}

MESSAGE ACTUEL DE L'UTILISATEUR: ${message}

INSTRUCTIONS SP√âCIFIQUES:
- R√©ponds de mani√®re naturelle et conversationnelle
- Utilise le contexte sp√©cialis√© d√©tect√©: ${context}
- Sois pr√©cis et propose des actions concr√®tes
- Utilise des emojis pour rendre la r√©ponse engageante
- Si c'est une question sur le projet, r√©ponds avec des d√©tails sp√©cifiques

R√âPONSE:`;
      
      console.log('üöÄ Envoi au mod√®le avec contexte sp√©cialis√©');
      
      // Envoyer au mod√®le avec le contexte sp√©cialis√©
      const chatSession = this.model.startChat({
        generationConfig,
        history: [{ role: 'user', parts: [{ text: fullPrompt }] }],
      });

      // Obtenir la r√©ponse de l'IA
      const result = await chatSession.sendMessage(message);
      const responseText = await result.response.text();
      
      console.log('‚úÖ R√©ponse re√ßue du mod√®le');
      
      // Ajouter la conversation √† l'historique
      const conversationEntry = `\nUser: ${message}\nWifakBankAI: ${responseText}`;
      await this.chatSessionService.updateSession(conversationEntry);

      return responseText;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'appel de AI:', error);
      
      // En cas d'erreur, retourner une r√©ponse de fallback contextuelle
      const context = this.projectContextService.detectContext(message);
      const quickResponses = this.projectContextService.getQuickResponses(context);
      
      // Retourner une r√©ponse plus naturelle m√™me en cas d'erreur
      if (context === 'projectHelp') {
        return `Oui, je connais tr√®s bien votre projet GDP ! üöÄ C'est une application de gestion de projets pour WifakBank qui permet de g√©rer les projets, t√¢ches, utilisateurs, environnements et plus encore. Que souhaitez-vous savoir sp√©cifiquement sur votre projet ?`;
      }
      
      if (context === 'taskHelp') {
        if (userRole === 'DEVELOPPER') {
          return `Je peux vous aider avec vos t√¢ches ! ‚úÖ 

En tant que d√©veloppeur, voici comment proc√©der :
1. Cliquez sur "Mes tableaux de travail"
2. S√©lectionnez le tableau du projet souhait√©
3. Cliquez sur le bouton "Cr√©er t√¢che"
4. Remplissez les d√©tails de la t√¢che
5. Assignez la priorit√© et l'√©ch√©ance
6. Sauvegardez la t√¢che

Que souhaitez-vous faire exactement ?`;
        }
        return `Je peux vous aider avec vos t√¢ches ! ‚úÖ Voici comment proc√©der : ${quickResponses.join(' ')}`;
      }
      
      if (context === 'environmentHelp' && userRole === 'INFRA') {
        return `En tant qu'INFRA, voici comment g√©rer les environnements ! üñ•Ô∏è

Workflow recommand√© :
1. Acc√©der √† la section "Environnements"
2. Cliquer sur "Nouvel environnement"
3. Remplir les informations techniques (serveur, OS, etc.)
4. Configurer les acc√®s et permissions
5. Installer les logiciels n√©cessaires
6. Tester la connectivit√© et les services
7. Documenter la configuration

Que souhaitez-vous configurer ?`;
      }
      
      return `Je suis l√† pour vous aider ! üí° ${quickResponses.join(' ')}`;
    }
  }

  // M√©thode pour obtenir des suggestions bas√©es sur le contexte
  async getSuggestions(message: string, userRole?: string): Promise<string[]> {
    const context = this.projectContextService.detectContext(message);
    return this.projectContextService.getQuickResponses(context);
  }

  // M√©thode pour r√©initialiser le contexte de conversation
  async resetConversation(): Promise<void> {
    await this.chatSessionService.updateSession('');
  }
}
